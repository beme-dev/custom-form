import { expect, test } from '@playwright/test';
import fs from 'fs';
import path from 'path';

test.describe('CSV Processing Tests', () => {
  test('should upload and process a CSV file properly', async ({
    page,
  }) => {
    await page.goto('/form');

    // Cliquer sur le bouton d'ajout de champ
    await page.click('button:has-text("Ajouter un champ")');

    // Ouvrir l'accord√©on
    await page.click('.solid-headlessui-accordion-trigger');

    // S√©lectionner le type de champ "conditional"
    await page.selectOption('select', { value: 'conditional' });

    // V√©rifier que le bouton pour charger les donn√©es CSV appara√Æt
    const csvButton = page.locator('text=üöÄ Charger mes donn√©es CSV');
    await expect(csvButton).toBeVisible();

    // Cliquer sur le bouton pour ouvrir la bo√Æte de dialogue
    await csvButton.click();

    // V√©rifier que la bo√Æte de dialogue est visible
    await expect(
      page.locator('text=Importation de donn√©es CSV'),
    ).toBeVisible();

    // Pr√©parer le fichier √† t√©l√©charger
    const filePath = path.join(__dirname, 'fixtures', 'test-data.csv');

    // Configurer l'√©l√©ment d'entr√©e de fichier
    const fileChooserPromise = page.waitForEvent('filechooser');
    await page.click('.dropzone-area');
    const fileChooser = await fileChooserPromise;
    await fileChooser.setFiles(filePath);

    // V√©rifier que le fichier a √©t√© charg√© avec succ√®s
    await expect(page.locator('text=Fichier import√© :')).toBeVisible({
      timeout: 5000,
    });

    // V√©rifier que les donn√©es sont correctement affich√©es
    await expect(
      page.locator('text=Conditionnel √† 3 niveaux'),
    ).toBeVisible({ timeout: 5000 });

    // V√©rifier la pr√©sence des s√©lecteurs (pays, ville, quartier)
    await expect(page.locator('text=#01 - pays')).toBeVisible();

    // S√©lectionner "France" dans le premier s√©lecteur
    await page.selectOption('select >> nth=0', 'France');

    // V√©rifier que le deuxi√®me s√©lecteur (villes de France) appara√Æt
    await expect(page.locator('text=#02 - ville')).toBeVisible();
    await expect(page.locator('select >> nth=1')).toContainText('Paris');
    await expect(page.locator('select >> nth=1')).toContainText('Lyon');

    // S√©lectionner "Paris" dans le deuxi√®me s√©lecteur
    await page.selectOption('select >> nth=1', 'Paris');

    // V√©rifier que le troisi√®me s√©lecteur (quartiers de Paris) appara√Æt
    await expect(page.locator('text=#03 - quartier')).toBeVisible();
    await expect(page.locator('select >> nth=2')).toContainText(
      'Montmartre',
    );
    await expect(page.locator('select >> nth=2')).toContainText(
      'Bastille',
    );
  });

  test('should show error for invalid CSV file format', async ({
    page,
  }) => {
    await page.goto('/form');

    // Cr√©er un fichier CSV invalide temporaire
    const invalidFilePath = path.join(
      __dirname,
      'fixtures',
      'invalid-test-data.csv',
    );
    fs.writeFileSync(
      invalidFilePath,
      'pays,ville\nFrance,Paris,Montmartre\n',
    );

    // Cliquer sur le bouton d'ajout de champ
    await page.click('button:has-text("Ajouter un champ")');

    // Ouvrir l'accord√©on
    await page.click('.solid-headlessui-accordion-trigger');

    // S√©lectionner le type de champ "conditional"
    await page.selectOption('select', { value: 'conditional' });

    // Cliquer sur le bouton pour ouvrir la bo√Æte de dialogue
    await page.click('text=üöÄ Charger mes donn√©es CSV');

    // T√©l√©charger le fichier invalide
    const fileChooserPromise = page.waitForEvent('filechooser');
    await page.click('.dropzone-area');
    const fileChooser = await fileChooserPromise;
    await fileChooser.setFiles(invalidFilePath);

    // V√©rifier que le message d'erreur appara√Æt
    await expect(
      page.locator(
        "text=La ligne 1 ne correspond pas au nombre d'en-t√™tes",
      ),
    ).toBeVisible({ timeout: 5000 });

    // Nettoyer le fichier temporaire
    fs.unlinkSync(invalidFilePath);
  });

  test('should handle empty CSV file correctly', async ({ page }) => {
    await page.goto('/form');

    // Cr√©er un fichier CSV vide temporaire
    const emptyFilePath = path.join(
      __dirname,
      'fixtures',
      'empty-test-data.csv',
    );
    fs.writeFileSync(emptyFilePath, '');

    // Cliquer sur le bouton d'ajout de champ
    await page.click('button:has-text("Ajouter un champ")');

    // Ouvrir l'accord√©on
    await page.click('.solid-headlessui-accordion-trigger');

    // S√©lectionner le type de champ "conditional"
    await page.selectOption('select', { value: 'conditional' });

    // Cliquer sur le bouton pour ouvrir la bo√Æte de dialogue
    await page.click('text=üöÄ Charger mes donn√©es CSV');

    // T√©l√©charger le fichier vide
    const fileChooserPromise = page.waitForEvent('filechooser');
    await page.click('.dropzone-area');
    const fileChooser = await fileChooserPromise;
    await fileChooser.setFiles(emptyFilePath);

    // V√©rifier que le message d'erreur appara√Æt
    await expect(page.locator('text=Le fichier CSV est vide')).toBeVisible(
      { timeout: 5000 },
    );

    // Nettoyer le fichier temporaire
    fs.unlinkSync(emptyFilePath);
  });
});
