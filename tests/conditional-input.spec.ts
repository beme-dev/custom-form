import { expect, test } from '@playwright/test';
import path from 'path';

test.describe('ConditionalInput Component Tests', () => {
  test('should display nested selectors correctly', async ({ page }) => {
    await page.goto('/form');

    // Cliquer sur le bouton d'ajout de champ
    await page.click('button:has-text("Ajouter un champ")');

    // Ouvrir l'accordÃ©on
    await page.click('.solid-headlessui-accordion-trigger');

    // Saisir un nom de question
    await page.fill(
      'textarea[placeholder*="Question"]',
      'SÃ©lection gÃ©ographique',
    );

    // SÃ©lectionner le type de champ "conditional"
    await page.selectOption('select', { value: 'conditional' });

    // VÃ©rifier que le bouton pour charger les donnÃ©es CSV apparaÃ®t
    await expect(
      page.locator('text=ðŸš€ Charger mes donnÃ©es CSV'),
    ).toBeVisible();

    // Importer le fichier CSV
    const filePath = path.join(__dirname, 'fixtures', 'test-data.csv');

    // Cliquer sur le bouton pour ouvrir la boÃ®te de dialogue
    await page.click('text=ðŸš€ Charger mes donnÃ©es CSV');

    const fileChooserPromise = page.waitForEvent('filechooser');
    await page.click('.dropzone-area');
    const fileChooser = await fileChooserPromise;
    await fileChooser.setFiles(filePath);

    // Attendre que la boÃ®te de dialogue se ferme
    await expect(
      page.locator('text=Importation de donnÃ©es CSV'),
    ).not.toBeVisible({ timeout: 10000 });

    // Aller Ã  la vue du formulaire utilisateur
    await page.click('button:has-text("=>")');

    // Cliquer sur le bouton de basculement pour voir les champs du formulaire
    await page.click('.position-switcher', { force: true });

    // VÃ©rifier que les sÃ©lecteurs conditionnels sont affichÃ©s
    await expect(
      page.locator('text=SÃ©lection gÃ©ographique'),
    ).toBeVisible();
    await expect(
      page.locator('text=Conditionnel Ã  3 niveaux'),
    ).toBeVisible();

    // Tester le premier niveau de sÃ©lection (pays)
    await expect(page.locator('text=#01 - pays')).toBeVisible();

    // SÃ©lectionner "France"
    await page.selectOption('select >> nth=0', 'France');

    // VÃ©rifier que le second niveau apparaÃ®t avec les villes franÃ§aises
    await expect(page.locator('text=#02 - ville')).toBeVisible();
    await expect(page.locator('select >> nth=1')).toContainText('Paris');
    await expect(page.locator('select >> nth=1')).toContainText('Lyon');

    // SÃ©lectionner "Lyon"
    await page.selectOption('select >> nth=1', 'Lyon');

    // VÃ©rifier que le troisiÃ¨me niveau apparaÃ®t avec les quartiers lyonnais
    await expect(page.locator('text=#03 - quartier')).toBeVisible();
    await expect(page.locator('select >> nth=2')).toContainText(
      'Croix-Rousse',
    );
    await expect(page.locator('select >> nth=2')).toContainText(
      'Confluence',
    );

    // Changer le premier niveau pour "Belgique"
    await page.selectOption('select >> nth=0', 'Belgique');

    // VÃ©rifier que le second niveau change pour les villes belges
    await expect(page.locator('select >> nth=1')).toContainText(
      'Bruxelles',
    );
    await expect(page.locator('select >> nth=1')).toContainText('Anvers');

    // SÃ©lectionner "Bruxelles"
    await page.selectOption('select >> nth=1', 'Bruxelles');

    // VÃ©rifier que le troisiÃ¨me niveau change pour les quartiers bruxellois
    await expect(page.locator('select >> nth=2')).toContainText(
      'Grand-Place',
    );
    await expect(page.locator('select >> nth=2')).toContainText('Ixelles');
  });

  test('should reset selectors when changing parent selection', async ({
    page,
  }) => {
    await page.goto('/form');

    // Ajouter un champ et importer le CSV
    await page.click('button:has-text("Ajouter un champ")');
    await page.click('.solid-headlessui-accordion-trigger');
    await page.fill(
      'textarea[placeholder*="Question"]',
      'Test de rÃ©initialisation',
    );
    await page.selectOption('select', { value: 'conditional' });

    await page.click('text=ðŸš€ Charger mes donnÃ©es CSV');

    const filePath = path.join(__dirname, 'fixtures', 'test-data.csv');
    const fileChooserPromise = page.waitForEvent('filechooser');
    await page.click('.dropzone-area');
    const fileChooser = await fileChooserPromise;
    await fileChooser.setFiles(filePath);

    // Aller Ã  la vue du formulaire utilisateur
    await expect(page.locator('text=Fichier importÃ© :')).toBeVisible({
      timeout: 5000,
    });
    await page.click('button:has-text("=>")');
    await page.click('.position-switcher', { force: true });

    // SÃ©lectionner "France"
    await page.selectOption('select >> nth=0', 'France');

    // SÃ©lectionner "Paris"
    await page.selectOption('select >> nth=1', 'Paris');

    // SÃ©lectionner "Montmartre"
    await page.selectOption('select >> nth=2', 'Montmartre');

    // Revenir Ã  la sÃ©lection du pays et changer pour "Belgique"
    await page.selectOption('select >> nth=0', 'Belgique');

    // VÃ©rifier que le second niveau est rÃ©initialisÃ© avec les villes belges
    await expect(page.locator('select >> nth=1')).not.toContainText(
      'Paris',
    );
    await expect(page.locator('select >> nth=1')).toContainText(
      'Bruxelles',
    );

    // VÃ©rifier que le troisiÃ¨me niveau a disparu ou est dÃ©sactivÃ©
    await expect(
      page.locator('select >> nth=2:not([disabled])'),
    ).toHaveCount(0);
  });
});
